name: CI/CD Pipeline

on:
  push:
    branches: [ "develop", "master" ]
  pull_request:
    branches: [ "develop", "master" ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      issues: read
      checks: write
      pull-requests: write

    steps:
      - uses: actions/checkout@v4

      - uses: supercharge/mongodb-github-action@v1.10.0
      
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@417ae3ccd767c252f5661f1ace9f835f9654f2b5 # v3.1.0

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build with Gradle Wrapper
        run: ./gradlew build -x test

      - name: Test with Gradle
        run: |
          export FILE_DIR="$RUNNER_TEMP/tmp_files"
          export IMAGE_DIR="$RUNNER_TEMP/tmp_images"
          export VIDEO_DIR="$RUNNER_TEMP/tmp_videos"

          echo "FILE_DIR=$FILE_DIR"
          echo "IMAGE_DIR=$IMAGE_DIR"
          echo "VIDEO_DIR=$VIDEO_DIR"

          SPRING_PROFILES_ACTIVE=test ./gradlew test --no-parallel
        env:
          MONGO_HOST_IP: localhost
          MINIO_ENDPOINT: ${{ secrets.MINIO_ENDPOINT }}
          MINIO_BUCKET: portfolio-test
          MINIO_USERNAME: ${{ secrets.MINIO_USERNAME }}
          MINIO_PASSWORD: ${{ secrets.MINIO_PASSWORD }}

      - name: Publish Unit Test Results
        uses: EnricoMi/publish-unit-test-result-action@v2.6.1
        if: ${{ always() }}  # 테스트가 실패하여도 Report를 보기 위해 `always`로 설정
        with:
          files: build/test-results/**/*.xml

  push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    permissions:
      contents: read
    needs: build-and-test

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build Docker image
        run: docker build -t ${{ secrets.DOCKER_USERNAME }}/portfolio-website:latest .

      - name: Push Docker image
        run: docker push ${{ secrets.DOCKER_USERNAME }}/portfolio-website:latest